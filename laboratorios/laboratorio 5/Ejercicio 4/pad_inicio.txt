Es un desastre total: he pasado de la felicidad absoluta imaginándome con Ada en Tarawa, tirado en una hamaca con un daikiri en la mano, a volver al pánico absoluto.

Ya no puedo confiar en nadie, apenas te tengo a ti, que me has ayudado hasta ahora, y me pregunto... ¿lo seguirás haciendo?.

Ahora estamos Ale y yo frente a frente, y solo la voluntad de uno de los dos prevalecerá. Dicho esto, no tengo más remedio que revelar su identidad, aunque eso me pueda hundir para siempre.

Eso sí, antes necesito revalidar que me vas a ayudar en este último suspiro y que no te pasaste a su lado perverso, por ello, te planteo un último desafío:
    
No hace mucho sé que hicieron unos triggers para controlar una especialización disjunta total, la que sucede entre miembro y sus subclases ingeniería, ventas y gestión. Pero hay otra especialización, aparentemente es menos estricta, la de proyectos, que es disjunta parcial: la superclase proyectos y sus subclases, web, erp y venta_almacen.

Son varias cosas que tenemos que revisar:

    Como es disjunta hay que asegurar la independencia de los miembros de subclases de proyectos, y también la eliminación en la superclase tras el borrado en la subclase.

    Como la especialización no es total, en este caso sí puede haber objetos solamente en la superclase, pero atención, éstos deben tener código de  tipo 'O' o se deberá rechazar la inserción, también se debe validar con los otros códigos que los objetos deben estar previamente en las subclases    correspondientes, o se debe rechazar la operación. Por suerte ya hay un trigger que impide el ingreso de un proyecto cuyo código no sea válido, así que nos podemos ahorrar ese trabajo.


Entonces, deberás desarrollar:
    

    Una función que cuando la elimine a algún elemento de las subclases lo eliminen automáticamente de la superclase:


CREATE OR REPLACE FUNCTION borra_proyecto_superclase() RETURNS trigger AS $$

Los triggers para lanzarla son los siguientes:

CREATE TRIGGER proyecto_erp AFTER DELETE ON erp FOR EACH ROW EXECUTE PROCEDURE borra_proyecto_superclase();
CREATE TRIGGER proyecto_web AFTER DELETE ON web FOR EACH ROW EXECUTE PROCEDURE borra_proyecto_superclase();
CREATE TRIGGER proyecto_venta_almacen AFTER DELETE ON venta_almacen FOR EACH ROW EXECUTE PROCEDURE borra_proyecto_superclase();

Deberás probar con la siguiente sentencia:
    
delete from web where codigo_proyecto ='W-2018-2';

2. Una función que, dado que la especialización es disjunta, garantice que no pueda existir el mismo objeto en más de una subclase:

CREATE OR REPLACE FUNCTION proyecto_ya_esta_en_otra_subclase() RETURNS trigger AS $$

Los triggers para lanzarla son los siguientes:

CREATE TRIGGER proyecto_erp_no_en_otras BEFORE INSERT OR UPDATE ON erp FOR EACH ROW EXECUTE PROCEDURE proyecto_ya_esta_en_otra_subclase();
CREATE TRIGGER proyecto_venta_almacen_no_en_otras BEFORE INSERT OR UPDATE ON venta_almacen FOR EACH ROW EXECUTE PROCEDURE proyecto_ya_esta_en_otra_subclase();
CREATE TRIGGER proyecto_web_no_en_otras BEFORE INSERT OR UPDATE ON web FOR EACH ROW EXECUTE PROCEDURE proyecto_ya_esta_en_otra_subclase();

Deberás probarlos con la siguiente sentencia (que gracias al trigger será rechazada porque ese proyecto ya está en la subclase Web):
    
insert into erp values ('W-2018-1');

3. Una función para comprobación de que los proyectos están siendo introducidos en la subclase correcta. Es importante notar que aunque la especialización es parcial, si los proyectos son de tipo Web, Venta_almacen o ERP, deben ser a la vez introducidos en la subclase correspondiente y en proyecto, como si fuera total. Para ello debe tomarse en cuenta que los respectivos FK de las subclases a la superclase son diferibles.

CREATE OR REPLACE FUNCTION comprueba_proyecto_subclase() RETURNS trigger AS $$

CREATE TRIGGER proyecto_en_subclase BEFORE INSERT OR UPDATE ON proyecto FOR EACH ROW EXECUTE PROCEDURE comprueba_proyecto_subclase();

Deberás probar con la siguientes transacciones:

Ésta no funcionará porque se olvida la inserción en subclase.

BEGIN;

SET CONSTRAINTS fk_ingenieria_miembro,desarrolla_participacion_total_proyecto,desarrolla_participacion_total_ingenieria,fk_web_proyecto DEFERRED;

DO $$
DECLARE
    codigo_proyecto VARCHAR;
BEGIN
    insert into ingenieria values ('08822144-5'); 
    insert into miembro values ('08822144-5','Carolina','Ingeniería'); 
    codigo_proyecto:=nuevo_codigo_proyecto('W');
    insert into proyecto values (codigo_proyecto,'phppgadmindecente','Web',null,null,1000,'http://dei2.uca.edu.sv/phppgadmin');    
    insert into desarrolla values (codigo_proyecto,'08822144-5','Desarrollo');
END $$;

COMMIT;

Ésta tampoco tendrá éxito porque la subclase es incorrecta

BEGIN;

SET CONSTRAINTS fk_ingenieria_miembro,desarrolla_participacion_total_proyecto,desarrolla_participacion_total_ingenieria,fk_web_proyecto DEFERRED;

DO $$
DECLARE
    codigo_proyecto VARCHAR;
BEGIN
    insert into ingenieria values ('08822144-5'); 
    insert into miembro values ('08822144-5','Carolina','Ingeniería'); 
    codigo_proyecto:=nuevo_codigo_proyecto('O');
    insert into web values (codigo_proyecto,'http://dei2.uca.edu.sv/phppgadmin',80,40);
    insert into proyecto values (codigo_proyecto,'phppgadmindecente','Web',null,null,1000,'http://dei2.uca.edu.sv/phppgadmin');    
    insert into desarrolla values (codigo_proyecto,'08822144-5','Desarrollo');
END $$;

COMMIT;

Al fin, la siguiente transacción sí debería funcionar correctamente.

BEGIN;

SET CONSTRAINTS fk_ingenieria_miembro,desarrolla_participacion_total_proyecto,desarrolla_participacion_total_ingenieria,fk_web_proyecto DEFERRED;

DO $$
DECLARE
    codigo_proyecto VARCHAR;
BEGIN
    insert into ingenieria values ('08822144-5'); 
    insert into miembro values ('08822144-5','Carolina','Ingeniería'); 
    codigo_proyecto:=nuevo_codigo_proyecto('W');
    insert into web values (codigo_proyecto,'http://dei2.uca.edu.sv/phppgadmin',80,40);
    insert into proyecto values (codigo_proyecto,'phppgadmindecente','Web',null,null,1000,'http://dei2.uca.edu.sv/phppgadmin');    
    insert into desarrolla values (codigo_proyecto,'08822144-5','Desarrollo');
END $$;

COMMIT;

Por favor resuelve el anterior problema y espera mis instrucciones en la tabla kurt_out.